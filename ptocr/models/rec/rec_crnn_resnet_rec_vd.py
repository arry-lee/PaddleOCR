# This .py is auto generated by the script in the root folder.
from ptocr.config import ConfigModel, _
from ptocr.modules.backbones.resnet.rec_resnet_vd import ResNet_Rec_Vd
from ptocr.modules.necks.rnn import SequenceEncoder
from ptocr.modules.heads.ctc import CTCHead
from ptocr.loss.ctc import CTCLoss
from ptocr.metrics.rec import RecMetric
from torch.optim import Adam
from torch.optim.lr_scheduler import ConstantLR
from ptocr.postprocess.rec import CTCLabelDecode
from ptocr.datasets.lmdb import LMDBDataSet
from ptocr.transforms.operators import KeepKeys, DecodeImage
from ptocr.transforms.label_ops import CTCLabelEncode
from ptocr.transforms.rec_img_aug import RecResizeImg


class Model(ConfigModel):
    use_gpu = True
    epoch_num = 72
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/rec/r34_vd_none_bilstm_ctc/"
    save_epoch_step = 3
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words_en/word_10.png"
    character_dict_path = None
    max_text_length = 25
    infer_mode = False
    use_space_char = False
    save_res_path = "./output/rec/predicts_r34_vd_none_bilstm_ctc.txt"
    model_type = "rec"
    algorithm = "CRNN"
    Transform = None
    Backbone = _(ResNet_Rec_Vd, layers=34)
    Neck = _(SequenceEncoder, encoder_type="rnn", hidden_size=256)
    Head = _(CTCHead, fc_decay=0)
    loss = CTCLoss()
    metric = RecMetric(main_indicator="acc")
    Optimizer = _(Adam, betas=[0.9, 0.999], lr=0.0005)
    LRScheduler = _(
        ConstantLR,
    )
    PostProcessor = _(
        CTCLabelDecode,
    )

    class Train:
        Dataset = _(
            LMDBDataSet, data_dir="./train_data/data_lmdb_release/training/"
        )
        transforms = _[
            DecodeImage(img_mode="BGR", channel_first=False),
            CTCLabelEncode(),
            RecResizeImg(image_shape=[3, 32, 100]),
            KeepKeys(keep_keys=["image", "label", "length"]),
        ]
        DATALOADER = _(
            shuffle=True, batch_size=256, drop_last=True, num_workers=8
        )

    class Eval:
        Dataset = _(
            LMDBDataSet, data_dir="./train_data/data_lmdb_release/validation/"
        )
        transforms = _[
            DecodeImage(img_mode="BGR", channel_first=False),
            CTCLabelEncode(),
            RecResizeImg(image_shape=[3, 32, 100]),
            KeepKeys(keep_keys=["image", "label", "length"]),
        ]
        DATALOADER = _(
            shuffle=False, drop_last=False, batch_size=256, num_workers=4
        )
