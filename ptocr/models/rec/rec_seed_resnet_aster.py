# This .py is auto generated by the script in the root folder.
from ptocr.config import ConfigModel, _
from ptocr.modules.transforms.stn import STN_ON
from ptocr.modules.backbones.resnet.rec_resnet_aster import ResNet_ASTER
from ptocr.modules.heads.aster import AsterHead
from ptocr.loss.aster import AsterLoss
from ptocr.metrics.rec import RecMetric
from torch.optim import Adadelta
from ptocr.optim.lr_scheduler import PiecewiseLR
from ptocr.postprocess.rec import SEEDLabelDecode
from ptocr.datasets.lmdb import LMDBDataSet
from ptocr.transforms.operators import DecodeImage, KeepKeys, Fasttext
from ptocr.transforms.label_ops import SEEDLabelEncode
from ptocr.transforms.rec_img_aug import RecResizeImg


class Model(ConfigModel):
    use_gpu = True
    epoch_num = 6
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/rec/seed"
    save_epoch_step = 3
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words_en/word_10.png"
    character_dict_path = "ppocr/utils/EN_symbol_dict.txt"
    max_text_length = 100
    infer_mode = False
    use_space_char = False
    save_res_path = "./output/rec/predicts_seed.txt"
    model_type = "rec"
    algorithm = "SEED"
    Transform = _(
        STN_ON,
        tps_inputsize=[32, 64],
        tps_outputsize=[32, 100],
        num_control_points=20,
        tps_margins=[0.05, 0.05],
        stn_activation="none",
    )
    Backbone = _(
        ResNet_ASTER,
    )
    Head = _(AsterHead, sDim=512, attDim=512, max_len_labels=100)
    loss = AsterLoss()
    metric = RecMetric(main_indicator="acc", is_filter=True)
    Optimizer = _(Adadelta, weight_deacy=0.0, momentum=0.9)
    LRScheduler = _(PiecewiseLR, decay_epochs=[4, 5], values=[1.0, 0.1, 0.01])
    PostProcessor = _(
        SEEDLabelDecode,
    )

    class Train:
        Dataset = _(
            LMDBDataSet, data_dir="./train_data/data_lmdb_release/training/"
        )
        transforms = _[
            Fasttext(path="./cc.en.300.bin"),
            DecodeImage(img_mode="BGR", channel_first=False),
            SEEDLabelEncode(),
            RecResizeImg(
                character_dict_path=None,
                image_shape=[3, 64, 256],
                padding=False,
            ),
            KeepKeys(keep_keys=["image", "label", "length", "fast_label"]),
        ]
        DATALOADER = _(
            shuffle=True, batch_size=256, drop_last=True, num_workers=6
        )

    class Eval:
        Dataset = _(
            LMDBDataSet, data_dir="./train_data/data_lmdb_release/evaluation/"
        )
        transforms = _[
            DecodeImage(img_mode="BGR", channel_first=False),
            SEEDLabelEncode(),
            RecResizeImg(
                character_dict_path=None,
                image_shape=[3, 64, 256],
                padding=False,
            ),
            KeepKeys(keep_keys=["image", "label", "length"]),
        ]
        DATALOADER = _(
            shuffle=False, drop_last=True, batch_size=256, num_workers=4
        )
