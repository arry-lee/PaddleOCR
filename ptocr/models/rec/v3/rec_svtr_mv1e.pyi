# This .pyi is auto generated by the script in the root folder.
# only for cache,use .py for changes
from ptocr.config import ConfigModel,_
from ptocr.modules.backbones.rec_mv1_enhance import MobileNetV1Enhance
from ptocr.modules.heads.multi import MultiHead
from ptocr.loss.compose import MultiLoss
from ptocr.metrics.rec import RecMetric
from ptocr.postprocess.rec import CTCLabelDecode
from torch.optim import Adam
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts
from ptocr.datasets.simple import SimpleDataSet
from ptocr.transforms.operators import DecodeImage, KeepKeys
from ptocr.transforms.rec_img_aug import RecResizeImg, RecAug, RecConAug
from ptocr.transforms.label_ops import MultiLabelEncode
class Model(ConfigModel):
    debug = False
    use_gpu = True
    epoch_num = 500
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = None
    save_epoch_step = 3
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    character_dict_path = "ppocr/utils/en_dict.txt"
    max_text_length = 25
    infer_mode = False
    use_space_char = True
    distributed = False
    model_type = 'rec'
    algorithm = 'SVTR'
    Transform = None
    Backbone = _(MobileNetV1Enhance, scale=0.5, last_conv_stride=[1, 2], last_pool_type="avg")
    Head = _(MultiHead, head_list=[{'class': 'CTCHead', 'Neck': {'class': 'svtr', 'dims': 64, 'depth': 2, 'hidden_dims': 120, 'use_guide': True}, 'Head': {'fc_decay': 1e-05}}, {'class': 'SARHead', 'enc_dim': 512, 'max_text_length': 25}])
    loss = MultiLoss(loss_config_list=[{'CTCLoss': None}, {'SARLoss': None}])
    metric = RecMetric(main_indicator="acc", ignore_space=False)
    postprocessor = CTCLabelDecode()
    Optimizer = _(Adam,betas=[0.9, 0.999], lr=0.001)
    LRScheduler = _(CosineAnnealingWarmRestarts,T_0=5)
    class Data:
        dataset = SimpleDataSet
        root:"train_data" = "train_data/"
        label_file_list:"val_list.txt" = "train_list.txt"
    class Loader:
        shuffle:False = True
        drop_last:False = True
        batch_size = 128
        num_workers = 4
    Transforms = _[DecodeImage(img_mode="BGR", channel_first=False),RecConAug(prob=0.5, ext_data_num=2, image_shape=[48, 320, 3], max_text_length=25):,RecAug():,MultiLabelEncode():...,RecResizeImg(image_shape=[3, 48, 320]),KeepKeys("image","label_ctc","label_sar","length","valid_ratio"):...]
