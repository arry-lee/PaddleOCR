# This .py is auto generated by the script in the root folder.
from ptocr.config import ConfigModel, _
from ptocr.modules.backbones.resnet.det_resnet_vd import ResNet_vd
from ptocr.modules.necks.ct_fpn import CTFPN
from ptocr.modules.heads.ct import CTHead
from ptocr.loss.ct import CTLoss
from ptocr.metrics.ct import CTMetric
from ptocr.postprocess.ct import CTPostProcess
from torch.optim import Adam
from torch.optim.lr_scheduler import PolynomialLR
from ptocr.datasets.simple import SimpleDataSet
from ptocr.transforms.operators import (
    KeepKeys,
    NormalizeImage,
    ToCHWImage,
    DecodeImage,
)
from ptocr.transforms.label_ops import CTLabelEncode
from ptocr.transforms.ct_process import (
    GroupRandomCropPadding,
    ScaleAlignedShort,
    MakeCentripetalShift,
    MakeShrink,
    GroupRandomHorizontalFlip,
    RandomScale,
    GroupRandomRotate,
)
from ptocr.transforms.ColorJitter import ColorJitter


class Model(ConfigModel):
    use_gpu = True
    epoch_num = 600
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/det_ct/"
    save_epoch_step = 10
    eval_batch_step = [0, 1000]
    metric_during_train = False
    pretrained_model = "./pretrain_models/ResNet18_vd_pretrained.pdparams"
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_en/img623.jpg"
    save_res_path = "./output/det_ct/predicts_ct.txt"
    model_type = "det"
    algorithm = "CT"
    Transform = None
    Backbone = _(ResNet_vd, layers=18)
    Neck = _(
        CTFPN,
    )
    Head = _(CTHead, in_channels=512, hidden_dim=128, num_classes=3)
    loss = CTLoss()
    metric = CTMetric(main_indicator="f_score")
    postprocessor = CTPostProcess(box_type="poly")
    Optimizer = _(Adam, lr=0.001)
    LRScheduler = _(PolynomialLR, total_iters="600*1254", power=0.9)

    Transforms = _[
                 DecodeImage(img_mode="RGB", channel_first=False),
                 CTLabelEncode():...,
                 RandomScale():,
                 MakeShrink():,
                 GroupRandomHorizontalFlip():,
                 GroupRandomRotate():,
                 GroupRandomCropPadding():,
                 MakeCentripetalShift():,
                 ColorJitter(brightness=0.125, saturation=0.5):,
                 :ScaleAlignedShort():...,
                 ToCHWImage(),
                 NormalizeImage(),
                 KeepKeys(
                     "image",
                     "gt_kernel",
                     "training_mask",
                     "gt_instance",
                     "gt_kernel_instance",
                     "training_mask_distance",
                     "gt_distance"
                 ):KeepKeys("image", "shape", "polys", "texts"):KeepKeys("image", "shape"),
                 ]

    class Data:
        dataset = SimpleDataSet
        root = "./train_data/total_text/train",
        label_files: "test.txt" = "train.txt",
        ratio_list = [1.0]

    class Loader:
        shuffle: False = True
        drop_last: False = True
        batch_size: 1 = 4
        num_workers: 2 = 8
