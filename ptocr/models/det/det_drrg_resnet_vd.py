# This .py is auto generated by the script in the root folder.
from ptocr.config import ConfigModel, _
from ptocr.modules.backbones.resnet.det_resnet_vd import ResNet_vd
from ptocr.modules.necks.fpn_unet import FPN_UNet
from ptocr.modules.heads.drrg import DRRGHead
from ptocr.loss.drrg import DRRGLoss
from ptocr.metrics.det import DetFCEMetric
from torch.optim import SGD
from torch.optim.lr_scheduler import PolynomialLR
from ptocr.postprocess.drrg import DRRGPostprocess
from ptocr.datasets.simple import SimpleDataSet
from ptocr.transforms.operators import (
    ToCHWImage,
    DetResizeForTest,
    Pad,
    DecodeImage,
    NormalizeImage,
    KeepKeys,
)
from ptocr.transforms.label_ops import DetLabelEncode
from ptocr.transforms.ColorJitter import ColorJitter
from ptocr.transforms.fce_aug import (
    RandomRotatePolyInstances,
    RandomScaling,
    SquareResizePad,
    RandomCropFlip,
    RandomCropPolyInstances,
)
from ptocr.transforms.iaa_augment import IaaAugment
from ptocr.transforms.drrg_targets import DRRGTargets


class Model(ConfigModel):
    use_gpu = True
    epoch_num = 1200
    log_window_size = 20
    log_batch_step = 5
    save_model_dir = "./output/det_r50_drrg_ctw/"
    save_epoch_step = 100
    eval_batch_step = [37800, 1260]
    metric_during_train = False
    pretrained_model = "./pretrain_models/ResNet50_vd_ssld_pretrained.pdparams"
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_en/img_10.jpg"
    save_res_path = "./output/det_drrg/predicts_drrg.txt"
    model_type = "det"
    algorithm = "DRRG"
    Transform = None
    Backbone = _(ResNet_vd, layers=50)
    Neck = _(FPN_UNet, in_channels=[256, 512, 1024, 2048], out_channels=32)
    Head = _(
        DRRGHead, in_channels=32, text_region_thr=0.3, center_region_thr=0.4
    )
    loss = DRRGLoss()
    metric = DetFCEMetric(main_indicator="hmean")
    Optimizer = _(SGD, momentum=0.9, lr=0.028, weight_decay=0.0001)
    LRScheduler = _(PolynomialLR, total_iters=1200, power=0.9)
    PostProcessor = _(DRRGPostprocess, link_thr=0.8)

    class Train:
        Dataset = _(
            SimpleDataSet,
            data_dir="./train_data/ctw1500/imgs/",
            label_file_list=["./train_data/ctw1500/imgs/training.txt"],
        )
        transforms = _[
            DecodeImage(
                img_mode="BGR", channel_first=False, ignore_orientation=True
            ),
            DetLabelEncode(),
            ColorJitter(brightness=0.12549019607843137, saturation=0.5),
            RandomScaling(),
            RandomCropFlip(crop_ratio=0.5),
            RandomCropPolyInstances(crop_ratio=0.8, min_side_ratio=0.3),
            RandomRotatePolyInstances(
                rotate_ratio=0.5, max_angle=60, pad_with_fixed_color=False
            ),
            SquareResizePad(target_size=800, pad_ratio=0.6),
            IaaAugment(augmenter_args=[{"type": "Fliplr", "args": {"p": 0.5}}]),
            DRRGTargets(),
            NormalizeImage(
                scale="1./255.",
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                order="hwc",
            ),
            ToCHWImage(),
            KeepKeys(
                keep_keys=[
                    "image",
                    "gt_text_mask",
                    "gt_center_region_mask",
                    "gt_mask",
                    "gt_top_height_map",
                    "gt_bot_height_map",
                    "gt_sin_map",
                    "gt_cos_map",
                    "gt_comp_attribs",
                ]
            ),
        ]
        DATALOADER = _(
            shuffle=True, drop_last=False, batch_size=4, num_workers=8
        )

    class Eval:
        Dataset = _(
            SimpleDataSet,
            data_dir="./train_data/ctw1500/imgs/",
            label_file_list=["./train_data/ctw1500/imgs/test.txt"],
        )
        transforms = _[
            DecodeImage(
                img_mode="BGR", channel_first=False, ignore_orientation=True
            ),
            DetLabelEncode(),
            DetResizeForTest(limit_type="min", limit_side_len=640),
            NormalizeImage(
                scale="1./255.",
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                order="hwc",
            ),
            Pad(),
            ToCHWImage(),
            KeepKeys(keep_keys=["image", "shape", "polys", "ignore_tags"]),
        ]
        DATALOADER = _(
            shuffle=False, drop_last=False, batch_size=1, num_workers=2
        )
