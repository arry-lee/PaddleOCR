# This .pyi is auto generated by the script in the root folder.
# only for cache,use .py for changes
from toddleocr.config import _, ConfigModel
from toddleocr.datasets.simple import SimpleDataSet
from toddleocr.loss.fce import FCELoss
from toddleocr.metrics.det import DetFCEMetric
from toddleocr.modules.backbones.resnet.det_resnet_vd import ResNet_vd
from toddleocr.modules.heads.fce import FCEHead
from toddleocr.modules.necks.fce_fpn import FCEFPN
from toddleocr.postprocess.fce import FCEPostProcess
from toddleocr.transforms.ColorJitter import ColorJitter
from toddleocr.transforms.fce_aug import (
    RandomCropFlip,
    RandomCropPolyInstances,
    RandomRotatePolyInstances,
    RandomScaling,
    SquareResizePad,
)
from toddleocr.transforms.fce_targets import FCENetTargets
from toddleocr.transforms.iaa_augment import IaaAugment
from toddleocr.transforms.label_ops import DetLabelEncode
from toddleocr.transforms.operators import (
    DecodeImage,
    DetResizeForTest,
    KeepKeys,
    NormalizeImage,
    Pad,
    ToCHWImage,
)
from torch.optim import Adam
from torch.optim.lr_scheduler import ConstantLR

class Model(ConfigModel):
    use_gpu = True
    epoch_num = 1500
    log_window_size = 20
    log_batch_step = 20
    save_model_dir = None
    save_epoch_step = 100
    eval_batch_step = [0, 835]
    metric_during_train = False
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    model_type = "det"
    algorithm = "FCE"
    Transform = None
    Backbone = _(
        ResNet_vd, layers=50, dcn_stage=[False, True, True, True], out_indices=[1, 2, 3]
    )
    Neck = _(FCEFPN, out_channels=256, has_extra_convs=False, extra_stage=0)
    Head = _(FCEHead, fourier_degree=5)
    loss = FCELoss(fourier_degree=5, num_sample=50)
    metric = DetFCEMetric(main_indicator="hmean")
    postprocessor = FCEPostProcess(
        scales=[8, 16, 32], alpha=1.0, beta=1.0, fourier_degree=5, box_type="poly"
    )
    Optimizer = _(Adam, betas=[0.9, 0.999], lr=0.0001)
    LRScheduler = _(
        ConstantLR,
    )

    class Data:
        dataset = SimpleDataSet
        root = "train_data/ctw1500/imgs/"
        label_file_list: "test.txt" = "training.txt"

    class Loader:
        shuffle: False = True
        drop_last = False
        batch_size: 1 = 6
        num_workers: 2 = 8
    Transforms = _[
        DecodeImage(img_mode="BGR", channel_first=False, ignore_orientation=True),
        DetLabelEncode() : ...,
        ColorJitter(brightness=0.142, saturation=0.5, contrast=0.5) :,
        RandomScaling() :,
        RandomCropFlip(crop_ratio=0.5) :,
        RandomCropPolyInstances(crop_ratio=0.8, min_side_ratio=0.3) :,
        RandomRotatePolyInstances(
            rotate_ratio=0.5, max_angle=30, pad_with_fixed_color=False
        ) :,
        SquareResizePad(target_size=800, pad_ratio=0.6) :,
        IaaAugment(augmenter_args=[{"type": "Fliplr", "args": {"p": 0.5}}]) :,
        FCENetTargets(fourier_degree=5) :,
        : DetResizeForTest(limit_type="min", limit_side_len=736),
        NormalizeImage(
            scale="1./255.",
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225],
            order="hwc",
        ),
        : Pad(),
        ToCHWImage(),
        KeepKeys("image", "p3_maps", "p4_maps", "p5_maps") : KeepKeys(
            "image", "shape", "polys", "ignore_tags"
        ) : ...,
    ]
