# This .pyi is auto generated by the script in the root folder.
# only for cache,use .py for changes
from toddleocr.config import _, ConfigModel
from toddleocr.datasets.pgnet import PGDataSet
from toddleocr.loss.pg import PGLoss
from toddleocr.metrics.e2e import E2EMetric
from toddleocr.modules.backbones.resnet.e2e_resnet_vd_pg import ResNet_E2E
from toddleocr.modules.heads.pg import PGHead
from toddleocr.modules.necks.pg_fpn import PGFPN
from toddleocr.postprocess.pg import PGPostProcess
from toddleocr.transforms.label_ops import E2ELabelEncodeTest, E2ELabelEncodeTrain
from toddleocr.transforms.operators import (
    DecodeImage,
    E2EResizeForTest,
    KeepKeys,
    NormalizeImage,
    ToCHWImage,
)
from toddleocr.transforms.pg_process import PGProcessTrain
from torch.optim import Adam
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts

class Model(ConfigModel):
    use_gpu = True
    epoch_num = 600
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = None
    save_epoch_step = 10
    eval_batch_step = [0, 1000]
    metric_during_train = False
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_visual_type = "EN"
    valid_set = "totaltext"
    character_dict_path = "ppocr/utils/ic15_dict.txt"
    character_type = "EN"
    max_text_length = 50
    max_text_nums = 30
    tcl_len = 64
    model_type = "e2e"
    algorithm = "PGNet"
    Transform = None
    Backbone = _(ResNet_E2E, layers=50)
    Neck = _(
        PGFPN,
    )
    Head = _(PGHead, character_dict_path="ppocr/utils/ic15_dict.txt")
    loss = PGLoss(tcl_bs=64, max_text_length=50, max_text_nums=30, pad_num=36)
    metric = E2EMetric(
        mode="A",
        gt_mat_dir="./train_data/total_text/gt",
        character_dict_path="ppocr/utils/ic15_dict.txt",
        main_indicator="f_score_e2e",
    )
    postprocessor = PGPostProcess(
        score_thresh=0.5, mode="fast", point_gather_mode="align"
    )
    Optimizer = _(Adam, betas=[0.9, 0.999], lr=0.001)
    LRScheduler = _(CosineAnnealingWarmRestarts, T_0=50)

    class Data:
        dataset = PGDataSet
        root: "train_data/total_text/test" = "train_data/total_text/train"
        label_file_list: "test.txt" = "train.txt"

    class Loader:
        shuffle: False = True
        drop_last: False = True
        batch_size: 1 = 14
        num_workers: 2 = 16
    Transforms = _[
        DecodeImage(img_mode="BGR", channel_first=False),
        E2ELabelEncodeTrain() :: ...,
        PGProcessTrain(
            batch_size=14,
            use_resize=True,
            use_random_crop=False,
            min_crop_size=24,
            min_text_size=4,
            max_text_size=512,
            point_gather_mode="align",
        ) :,
        : E2ELabelEncodeTest() : ...,
        : E2EResizeForTest(max_side_len=768),
        : NormalizeImage(
            scale="1./255.",
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225],
            order="hwc",
        ),
        : ToCHWImage(),
        KeepKeys(
            "images",
            "tcl_maps",
            "tcl_label_maps",
            "border_maps",
            "direction_maps",
            "training_masks",
            "label_list",
            "pos_list",
            "pos_mask",
        ) : KeepKeys("image", "shape", "polys", "texts", "ignore_tags", "img_id") : ...,
    ]
