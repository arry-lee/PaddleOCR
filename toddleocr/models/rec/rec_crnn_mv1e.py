# This .py is auto generated by the script in the root folder.
import os
import sys
from collections import defaultdict

import numpy as np

sys.path.append(os.getcwd())

from toddleocr.config import _, ConfigModel
from toddleocr.datasets.simple import SimpleDataSet
from toddleocr.loss.compose import CombinedLoss
from toddleocr.metrics.rec import RecMetric
from toddleocr.modules.backbones.rec_mv1_enhance import MobileNetV1Enhance
from toddleocr.modules.heads.ctc import CTCHead
from toddleocr.modules.necks.rnn import SequenceEncoder
from toddleocr.optim.lr_scheduler import PiecewiseLR
from toddleocr.postprocess.rec import CTCLabelDecode
from toddleocr.transforms import CTCLabelEncode, DecodeImage, KeepKeys, RecAug, RecResizeImg
from torch.optim import Adam


class Model(ConfigModel):
    debug = False
    use_gpu = True
    epoch_num = 800
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/rec_mobile_pp-OCRv2_enhanced_ctc_loss"
    save_epoch_step = 3
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words/ch/word_1.jpg"
    character_dict_path = "toddleocr/utils/ppocr_keys_v1.txt"
    max_text_length = 25
    infer_mode = False
    use_space_char = True
    distributed = False
    save_res_path = "./output/rec/predicts_mobile_pp-OCRv2_enhanced_ctc_loss.txt"
    model_type = "rec"
    algorithm = "CRNN"

    postprocessor = CTCLabelDecode(character_dict_path, use_space_char)

    Transform = None
    Backbone = _(MobileNetV1Enhance, scale=0.5)
    Neck = _(SequenceEncoder, encoder_type="rnn", hidden_size=64)
    Head = _(
        CTCHead,
        out_channels=len(postprocessor.character),
        mid_channels=96,
        fc_decay=2e-05,
        return_feats=True,
    )
    loss = CombinedLoss(
        loss_config_list=[
            {"CTCLoss": {"use_focal_loss": False, "weight": 1.0}},
            {
                "CenterLoss": {
                    "weight": 0.05,
                    "num_classes": 6625,
                    "feat_dim": 96,
                    "center_file_path": None,
                }
            },
        ]
    )
    metric = RecMetric(main_indicator="acc")
    postprocessor = CTCLabelDecode()
    Optimizer = _(Adam, betas=[0.9, 0.999])
    LRScheduler = _(
        PiecewiseLR, decay_epochs=[700], values=[0.001, 0.0001], warmup_epoch=5
    )

    class Data:
        dataset = SimpleDataSet
        root: "train_data" = "train_data/"
        label_file_list: "val_list.txt" = "train_list.txt"

    class Loader:
        shuffle: False = True
        drop_last: False = True
        batch_size = 128
        num_workers = 8

    Transforms = _[
        DecodeImage(img_mode="BGR", channel_first=False),
        RecAug() :,
        CTCLabelEncode() : ...,
        RecResizeImg(image_shape=[3, 32, 320]),
        KeepKeys("image", "label", "length", "label_ace") : KeepKeys(
            "image", "label", "length"
        ) : ...,
    ]
