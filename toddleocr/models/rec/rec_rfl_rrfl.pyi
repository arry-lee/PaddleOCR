# This .pyi is auto generated by the script in the root folder.
# only for cache,use .py for changes
from toddleocr.config import _, ConfigModel
from toddleocr.datasets.lmdb import LMDBDataSet
from toddleocr.loss.rfl import RFLLoss
from toddleocr.metrics.rec import CNTMetric
from toddleocr.modules.backbones.resnet.rec_resnet_rfl import ResNetRFL
from toddleocr.modules.heads.rfl import RFLHead
from toddleocr.modules.necks.rf_adaptor import RFAdaptor
from toddleocr.modules.transforms.tps import TPS
from toddleocr.optim.lr_scheduler import PiecewiseLR
from toddleocr.postprocess.rec import RFLLabelDecode
from toddleocr.transforms.label_ops import RFLLabelEncode
from toddleocr.transforms.operators import DecodeImage, KeepKeys
from toddleocr.transforms.rec_img_aug import RFLRecResizeImg
from torch.optim import AdamW

class Model(ConfigModel):
    use_gpu = True
    epoch_num = 6
    log_window_size = 20
    log_batch_step = 50
    save_model_dir = None
    save_epoch_step = 1
    eval_batch_step = [0, 5000]
    metric_during_train = False
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    character_dict_path = None
    max_text_length = 25
    infer_mode = False
    use_space_char = False
    model_type = "rec"
    algorithm = "RFL"
    in_channels = 1
    Transform = _(TPS, num_fiducial=20, loc_lr=1.0, model_name="large")
    Backbone = _(ResNetRFL, use_cnt=True, use_seq=False)
    Neck = _(RFAdaptor, use_v2s=False, use_s2v=False)
    Head = _(
        RFLHead,
        in_channels=512,
        hidden_size=256,
        batch_max_legnth=25,
        out_channels=38,
        use_cnt=True,
        use_seq=False,
    )
    loss = RFLLoss()
    metric = CNTMetric(main_indicator="acc")
    postprocessor = RFLLabelDecode()
    Optimizer = _(AdamW, beta1=0.9, beta2=0.999, weight_decay=0.0, clip_norm_global=5.0)
    LRScheduler = _(
        PiecewiseLR, decay_epochs=[3, 4, 5], values=[0.001, 0.0003, 9e-05, 2.7e-05]
    )

    class Data:
        dataset = LMDBDataSet
        root: "train_data/data_lmdb_release/evaluation" = (
            "train_data/data_lmdb_release/training"
        )

    class Loader:
        shuffle: False = True
        drop_last: False = True
        batch_size: 256 = 64
        num_workers = 8
    Transforms = _[
        DecodeImage(img_mode="BGR", channel_first=False),
        RFLLabelEncode() : ...,
        RFLRecResizeImg(image_shape=[1, 32, 100], padding=False, interpolation=2),
        KeepKeys("image", "label", "length", "cnt_label") : ...,
    ]
