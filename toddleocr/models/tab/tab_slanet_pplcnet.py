# This .py is auto generated by the script in the root folder.
import os
import sys

sys.path.append(os.getcwd())
from toddleocr.config import _, ConfigModel, PROJECT_DIR
from toddleocr.datasets.pubtab import PubTabDataSet
from toddleocr.loss.table_att import SLALoss
from toddleocr.metrics.table import TableMetric
from toddleocr.modules.backbones.det_pp_lcnet import PPLCNet
from toddleocr.modules.heads.table_att import SLAHead
from toddleocr.modules.necks.csp_pan import CSPPAN
from toddleocr.postprocess.table import TableLabelDecode
from toddleocr.transforms import (
    DecodeImage,
    KeepKeys,
    NormalizeImage,
    PaddingTableImage,
    ResizeTableImage,
    TableBoxEncode,
    TableLabelEncode,
    ToCHWImage,
)
from torch.optim import Adam
from torch.optim.lr_scheduler import ConstantLR

CHARACTER_DICT_PATH = os.path.join(
    PROJECT_DIR, "utils/dict/table_structure_dict_ch.txt"
)


class Model(ConfigModel):
    use_gpu = True
    epoch_num = 400
    log_window_size = 20
    log_batch_step = 20
    save_model_dir = "./output/SLANet_ch"
    save_epoch_step = 400
    eval_batch_step = [0, 331]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = "./output/SLANet_ch/infer"
    use_visualdl = False
    infer_img = ""
    character_dict_path = CHARACTER_DICT_PATH
    character_type = "en"
    max_text_length = 500
    box_format = "xy4"
    infer_mode = False
    use_sync_bn = True
    save_res_path = "output/infer"
    model_type = "tab"
    algorithm = "SLANet"
    Backbone = _(PPLCNet, scale=1.0, pretrained=True, use_ssld=True)
    Neck = _(CSPPAN, out_channels=96)
    postprocessor = TableLabelDecode(
        character_dict_path=character_dict_path, merge_no_span_structure=True
    )

    Head = _(
        SLAHead,
        out_channels=len(postprocessor.character),
        hidden_size=256,
        max_text_length=500,
        loc_reg_num=8,
    )

    loss = SLALoss(structure_weight=1.0, loc_weight=2.0, loc_loss="smooth_l1")
    metric = TableMetric(
        main_indicator="acc",
        compute_bbox_metric=False,
        loc_reg_num=8,
        box_format="xy4",
        del_thead_tbody=True,
    )
    Optimizer = _(Adam, betas=[0.9, 0.999], clip_norm=5.0, lr=0.001)
    LRScheduler = _(
        ConstantLR,
    )

    class Data:
        dataset = PubTabDataSet
        root: "train_data/table/val" = ("train_data/table/train/",)
        label_files: ["train_data/table/val.txt"] = ["train_data/table/train.txt"]

    class Loader:
        shuffle: False = True
        batch_size = 48
        drop_last: False = True
        num_workers = 1

    Transforms = _[
        DecodeImage(img_mode="BGR", channel_first=False),
        TableLabelEncode(
            character_dict_path=character_dict_path,
            learn_empty_box=False,
            merge_no_span_structure=True,
            replace_empty_cell_token=False,
            loc_reg_num=8,
            max_text_length=500,
        ) : ...,
        TableBoxEncode(in_box_format="xy4", out_box_format="xy4") : ...,
        ResizeTableImage(max_len=488) : ... : ResizeTableImage(
            max_len=488, infer_mode=True
        ),
        NormalizeImage(
            scale=1.0 / 255.0,
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225],
            order="hwc",
        ),
        PaddingTableImage(size=[488, 488]),
        ToCHWImage(),
        KeepKeys(
            "image", "structure", "bboxes", "bbox_masks", "shape"
        ) : ... : KeepKeys("image", "shape"),
    ]
