# This .py is auto generated by the script in the root folder.
from configs.config import ConfigModel,_
from ptocr.modules.transforms.tps import TPS
from ptocr.modules.backbones.rec_resnet_rfl import ResNetRFL
from ptocr.modules.necks.rf_adaptor import RFAdaptor
from ptocr.modules.heads.rfl import RFLHead
from ptocr.loss.rfl import RFLLoss
from ptocr.metrics.rec import CNTMetric
from torch.optim import AdamW
from ptocr.optim.lr_scheduler import PiecewiseLR
from ptocr.postprocess.rec import RFLLabelDecode
from ptocr.datasets.lmdb_dataset import LMDBDataSet
from ptocr.transforms.operators import DecodeImage, KeepKeys
from ptocr.transforms.label_ops import RFLLabelEncode
from ptocr.transforms.rec_img_aug import RFLRecResizeImg
class Model(ConfigModel):
    use_gpu = True
    epoch_num = 6
    log_window_size = 20
    log_batch_step = 50
    save_model_dir = "./output/rec/rec_resnet_rfl_visual/"
    save_epoch_step = 1
    eval_batch_step = [0, 5000]
    metric_during_train = False
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words_en/word_10.png"
    character_dict_path = None
    max_text_length = 25
    infer_mode = False
    use_space_char = False
    save_res_path = "./output/rec/rec_resnet_rfl_visual.txt"
    model_type = 'rec'
    algorithm = 'RFL'
    in_channels = 1
    Transform = _(TPS, num_fiducial=20, loc_lr=1.0, model_name="large")
    Backbone = _(ResNetRFL, use_cnt=True, use_seq=False)
    Neck = _(RFAdaptor, use_v2s=False, use_s2v=False)
    Head = _(RFLHead, in_channels=512, hidden_size=256, batch_max_legnth=25, out_channels=38, use_cnt=True, use_seq=False)
    loss = RFLLoss()
    metric = CNTMetric(main_indicator="acc")
    Optimizer = _(AdamW,beta1=0.9, beta2=0.999, weight_decay=0.0, clip_norm_global=5.0)
    LRScheduler = _(PiecewiseLR,decay_epochs=[3, 4, 5], values=[0.001, 0.0003, 9e-05, 2.7e-05])
    PostProcessor = _(RFLLabelDecode,)
    class Train:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/training")
        transforms = _[DecodeImage(img_mode="BGR", channel_first=False), RFLLabelEncode(), RFLRecResizeImg(image_shape=[1, 32, 100], padding=False, interpolation=2), KeepKeys(keep_keys=['image', 'label', 'length', 'cnt_label'])]
        DATALOADER = _(shuffle=True, batch_size=64, drop_last=True, num_workers=8)
    class Eval:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/evaluation")
        transforms = _[DecodeImage(img_mode="BGR", channel_first=False), RFLLabelEncode(), RFLRecResizeImg(image_shape=[1, 32, 100], padding=False, interpolation=2), KeepKeys(keep_keys=['image', 'label', 'length', 'cnt_label'])]
        DATALOADER = _(shuffle=False, drop_last=False, batch_size=256, num_workers=8)
