# This .py is auto generated by the script in the root folder.
from configs.config import ConfigModel,_
from ppocr.models.transforms.tps import TPS
from ppocr.models.backbones.rec_resnet_vd import ResNet
from ppocr.models.necks.rnn import SequenceEncoder
from ppocr.models.heads.rec_att_head import AttentionHead
from ppocr.losses.rec_att_loss import AttentionLoss
from ppocr.metrics.rec_metric import RecMetric
from torch.optim import Adam
from torch.optim.lr_scheduler import ConstantLR
from ppocr.postprocess.rec_postprocess import AttnLabelDecode
from ppocr.data.lmdb_dataset import LMDBDataSet
from ppocr.data.imaug.operators import DecodeImage, KeepKeys
from ppocr.data.imaug.label_ops import AttnLabelEncode
from ppocr.data.imaug.rec_img_aug import RecResizeImg
class Model(ConfigModel):
    use_gpu = True
    epoch_num = 400
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/rec/b3_rare_r34_none_gru/"
    save_epoch_step = 3
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = None
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words/ch/word_1.jpg"
    character_dict_path = None
    max_text_length = 25
    infer_mode = False
    use_space_char = False
    save_res_path = "./output/rec/predicts_b3_rare_r34_none_gru.txt"
    model_type = 'rec'
    algorithm = 'RARE'
    Transform = _(TPS, num_fiducial=20, loc_lr=0.1, model_name="large")
    Backbone = _(ResNet, layers=34)
    Neck = _(SequenceEncoder, encoder_type="rnn", hidden_size=256)
    Head = _(AttentionHead, hidden_size=256, l2_decay=1e-05)
    loss = AttentionLoss()
    metric = RecMetric(main_indicator="acc")
    Optimizer = _(Adam,betas=[0.9, 0.999], lr=0.0005)
    LRScheduler = _(ConstantLR,)
    PostProcessor = _(AttnLabelDecode,)
    class Train:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/training/")
        transforms = _[DecodeImage(img_mode="BGR", channel_first=False), AttnLabelEncode(), RecResizeImg(image_shape=[3, 32, 100]), KeepKeys(keep_keys=['image', 'label', 'length'])]
        DATALOADER = _(shuffle=True, batch_size=256, drop_last=True, num_workers=8)
    class Eval:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/validation/")
        transforms = _[DecodeImage(img_mode="BGR", channel_first=False), AttnLabelEncode(), RecResizeImg(image_shape=[3, 32, 100]), KeepKeys(keep_keys=['image', 'label', 'length'])]
        DATALOADER = _(shuffle=False, drop_last=False, batch_size=256, num_workers=8)
