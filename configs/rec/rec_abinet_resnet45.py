# This .py is auto generated by the script in the root folder.
from configs.config import ConfigModel,_
from ppocr.modeling.backbones.rec_resnet_45 import ResNet45
from ppocr.modeling.heads.rec_abinet_head import ABINetHead
from ppocr.losses.rec_ce_loss import CELoss
from ppocr.metrics.rec_metric import RecMetric
from torch.optim import Adam
from torch.nn import Piecewise
from ppocr.postprocess.rec_postprocess import ABINetLabelDecode
from ppocr.data.lmdb_dataset import LMDBDataSet
from ppocr.data.imaug.operators import KeepKeys, DecodeImage
from ppocr.data.imaug.rec_img_aug import ABINetRecResizeImg, ABINetRecAug
from ppocr.data.imaug.label_ops import ABINetLabelEncode
class Model(ConfigModel):
    use_gpu = True
    epoch_num = 10
    log_window_size = 20
    log_batch_step = 10
    save_model_dir = "./output/rec/r45_abinet/"
    save_epoch_step = 1
    eval_batch_step = [0, 2000]
    metric_during_train = True
    pretrained_model = "./pretrain_models/abinet_vl_pretrained"
    checkpoints = None
    save_infer_dir = None
    use_visualdl = False
    infer_img = "doc/imgs_words_en/word_10.png"
    character_dict_path = None
    character_type = "en"
    max_text_length = 25
    infer_mode = False
    use_space_char = False
    save_res_path = "./output/rec/predicts_abinet.txt"
    model_type = 'rec'
    algorithm = 'ABINet'
    in_channels = 3
    Transform = None
    Backbone = _(ResNet45, )
    Head = _(ABINetHead, use_lang=True, iter_size=3)
    loss = CELoss(ignore_index=100)
    metric = RecMetric(main_indicator="acc")
    Optimizer = _(Adam,betas=[0.9, 0.99], clip_norm=20.0)
    LRScheduler = _(Piecewise,decay_epochs=[6], values=[0.0001, 1e-05])
    PostProcessor = _(ABINetLabelDecode,)
    class Train:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/training/")
        transforms = _[DecodeImage(img_mode="RGB", channel_first=False), ABINetRecAug(), ABINetLabelEncode(ignore_index=100), ABINetRecResizeImg(image_shape=[3, 32, 128]), KeepKeys(keep_keys=['image', 'label', 'length'])]
        DATALOADER = _(shuffle=True, batch_size=96, drop_last=True, num_workers=4)
    class Eval:
        Dataset = _(LMDBDataSet, data_dir="./train_data/data_lmdb_release/evaluation/")
        transforms = _[DecodeImage(img_mode="RGB", channel_first=False), ABINetLabelEncode(ignore_index=100), ABINetRecResizeImg(image_shape=[3, 32, 128]), KeepKeys(keep_keys=['image', 'label', 'length'])]
        DATALOADER = _(shuffle=False, drop_last=False, batch_size=256, num_workers=4, use_shared_memory=False)